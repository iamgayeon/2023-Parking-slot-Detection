# -*- coding: utf-8 -*-
"""Parking-slot Detection

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1dHMwAq1LiaOpK-T-M5ml3f12pdXasbtY
"""

from google.colab import drive
drive.mount('/content/drive/')

cd/content/drive/MyDrive/TensorFlow-2.x-YOLOv3-master

from scipy import io
import cv2 as cv
from google.colab.patches import cv2_imshow

sample_annotation = io.loadmat('/content/drive/MyDrive/PS2_annotation/test/0043.mat') #연구실 label

mark_0043 = sample_annotation['marks']
slot_0043 = sample_annotation['slots']


print("------0043 annotation의 mark-----")
print(mark_0043, '\n')
print("------0043 annotation의 slot-----")
print(slot_0043, '\n')

sample_annotation_ps2 = io.loadmat('/content/drive/MyDrive/ps2.0/testing/all/0043.mat') #원본 label
sample_image_ps2 = cv.imread('/content/drive/MyDrive/ps2.0/testing/all/0043.jpg')

mark_0043_ps2 = sample_annotation_ps2['marks']
slot_0043_ps2 = sample_annotation_ps2['slots']

print("------0043 annotation의 mark-----")
print(mark_0043_ps2, '\n')
print("------0043 annotation의 slot-----")
print(slot_0043_ps2, '\n')

cv2_imshow(sample_image_ps2)

sample_annotation_2 = io.loadmat('/content/drive/MyDrive/ps2.0/testing/all/0001.mat') #연구실 label
sample_image_ps2_2 = cv.imread('/content/drive/MyDrive/ps2.0/testing/all/0001.jpg') #ps2 img
cv2_imshow(sample_image_ps2_2)

from scipy import io
import cv2 as cv
from google.colab.patches import cv2_imshow

sample_image_ps2 = cv.imread('/content/drive/MyDrive/ps2.0/training/p2_img118_0480.jpg')
sample_annotation= io.loadmat('/content/drive/MyDrive/PS2_annotation/train/p2_img118_0480.mat')

mark_0043 = sample_annotation['marks']
slot_0043 = sample_annotation['slots']


#open cv는 BGR로 표현
red = (0,0,255) #직각일 경우 빨간색
blue = (255,0,0) #평행일 경우 파란색
green = (0,255,0) #사선일 경우 초록색


junction_cnt = mark_0043.shape[0]

for i in range(junction_cnt):

  mark = int(mark_0043[i][5])

  if mark == 1:  #직각일경우
    color = red #빨간색 line

  elif mark == 2:  #평행일경우 
    color = blue  #파란색 line

  elif mark == 3:  #사선일경우
    color = green   #초록색 line

  junction_x = int(mark_0043[i][0]) #junction_x좌표
  junction_y = int(mark_0043[i][1]) #junction_y좌표

  cv.circle(sample_image_ps2,(junction_x,junction_y),5,(0,255,255),thickness = 2) #cv.circle(이미지 파일, 원의 중심 좌표, 반지름(5), 색상(노란색), 두께(2))

  end_point_x1 = int(mark_0043[i][0] + (40 * mark_0043[i][2])) #junction_x 좌표에 junction_x 방향을 더해줌
  end_point_y1 = int(mark_0043[i][1] + (40 * mark_0043[i][3])) #junction_y 좌표에 junction_y 방향을 더해줌

  cv.line(sample_image_ps2,(junction_x,junction_y),(end_point_x1, end_point_y1),color,thickness = 3) #cv.line(이미지 파일, 시작 좌표, 종료 좌표, 색상, 선두께)


  cv2_imshow(sample_image_ps2)

from scipy import io
import cv2 as cv
from google.colab.patches import cv2_imshow

sample_image_ps2 = cv.imread('/content/drive/MyDrive/ps2.0/training/p2_img118_0480.jpg') #ps2 img
sample_annotation= io.loadmat('/content/drive/MyDrive/PS2_annotation/train/p2_img118_0480.mat') #연구실 label

mark_0043 = sample_annotation['marks']
slot_0043 = sample_annotation['slots']


#open cv는 BGR로 표현
red = (0,0,255) #직각일 경우 빨간색
blue = (255,0,0) #평행일 경우 파란색
green = (0,255,0) #사선일 경우 초록색

occupied_color = (0,255,0) #차가 있을 경우

slot_cnt = slot_0043.shape[0]


for i in range(slot_cnt):

  mark = int(slot_0043[i][7])

  if mark == 1:  #직각일경우
    color = red #빨간색 line

  elif mark == 2:  #평행일경우 
    color = blue  #파란색 line

  elif mark == 3:  #사선일경우
    color = green   #초록색 line

  index1 = int(slot_0043[i][0] - 1)
  index2 = int(slot_0043[i][1] - 1)

  junction_x1= int(mark_0043[index1][0])
  junction_y1 = int(mark_0043[index1][1])
  
  junction_x2 = int(mark_0043[index2][0])
  junction_y2 = int(mark_0043[index2][1])

  center_x = int((junction_x1 + junction_x2)/2)
  center_y = int((junction_y1 + junction_y2)/2)

  center_x1 = int(center_x + 30 * mark_0043[i][2])
  center_y1 = int(center_y + 30 * mark_0043[i][3])
  
  end_point_x2 = int(junction_x1 + 30 * mark_0043[i][2])
  end_point_y2 = int(junction_y1 + 30 * mark_0043[i][3])

  end_point_x3 = int(junction_x2 + 30 * mark_0043[i][2])
  end_point_y3 = int(junction_y2 + 30 * mark_0043[i][3])


  cv.line(sample_image_ps2, (junction_x1,junction_y1), (junction_x2,junction_y2), color, thickness = 3)
  cv.line(sample_image_ps2, (center_x,center_y), (center_x1, center_y1), (0,255,255), thickness = 3)
  cv.line(sample_image_ps2, (junction_x1,junction_y1), (end_point_x2,end_point_y2), color, thickness = 3)
  cv.line(sample_image_ps2, (junction_x2,junction_y2), (end_point_x3,end_point_y3), color, thickness = 3)
  
cv2_imshow(sample_image_ps2)

#cv2_imshow(sample_image_ps2)
  #cv.circle(sample_image_ps2, (center_x, center_y),5, (255,255,255), thickness = 2)